# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sw_core_utils
else:
    import _sw_core_utils

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def gnc_environment_setup() -> "void":
    return _sw_core_utils.gnc_environment_setup()
GNC_PREFS_GROUP_GENERAL = _sw_core_utils.GNC_PREFS_GROUP_GENERAL
GNC_PREFS_GROUP_GENERAL_REGISTER = _sw_core_utils.GNC_PREFS_GROUP_GENERAL_REGISTER
GNC_PREFS_GROUP_GENERAL_REPORT = _sw_core_utils.GNC_PREFS_GROUP_GENERAL_REPORT
GNC_PREFS_GROUP_WARNINGS = _sw_core_utils.GNC_PREFS_GROUP_WARNINGS
GNC_PREFS_GROUP_WARNINGS_TEMP = _sw_core_utils.GNC_PREFS_GROUP_WARNINGS_TEMP
GNC_PREFS_GROUP_WARNINGS_PERM = _sw_core_utils.GNC_PREFS_GROUP_WARNINGS_PERM
GNC_PREFS_GROUP_ACCT_SUMMARY = _sw_core_utils.GNC_PREFS_GROUP_ACCT_SUMMARY
GNC_PREF_VERSION = _sw_core_utils.GNC_PREF_VERSION
GNC_PREF_SAVE_GEOMETRY = _sw_core_utils.GNC_PREF_SAVE_GEOMETRY
GNC_PREF_LAST_PATH = _sw_core_utils.GNC_PREF_LAST_PATH
GNC_PREF_USE_NEW = _sw_core_utils.GNC_PREF_USE_NEW
GNC_PREF_ACCOUNTING_LABELS = _sw_core_utils.GNC_PREF_ACCOUNTING_LABELS
GNC_PREF_ACCOUNT_SEPARATOR = _sw_core_utils.GNC_PREF_ACCOUNT_SEPARATOR
GNC_PREF_NEGATIVE_IN_RED = _sw_core_utils.GNC_PREF_NEGATIVE_IN_RED
GNC_PREF_NUM_SOURCE = _sw_core_utils.GNC_PREF_NUM_SOURCE
GNC_PREF_DATE_FORMAT = _sw_core_utils.GNC_PREF_DATE_FORMAT
GNC_PREF_DATE_COMPL_THISYEAR = _sw_core_utils.GNC_PREF_DATE_COMPL_THISYEAR
GNC_PREF_DATE_COMPL_SLIDING = _sw_core_utils.GNC_PREF_DATE_COMPL_SLIDING
GNC_PREF_DATE_BACKMONTHS = _sw_core_utils.GNC_PREF_DATE_BACKMONTHS
GNC_PREF_SHOW_LEAF_ACCT_NAMES = _sw_core_utils.GNC_PREF_SHOW_LEAF_ACCT_NAMES
GNC_PREF_ENTER_MOVES_TO_END = _sw_core_utils.GNC_PREF_ENTER_MOVES_TO_END
GNC_PREF_DRAW_HOR_LINES = _sw_core_utils.GNC_PREF_DRAW_HOR_LINES
GNC_PREF_DRAW_VERT_LINES = _sw_core_utils.GNC_PREF_DRAW_VERT_LINES
GNC_PREF_ALT_COLOR_BY_TRANS = _sw_core_utils.GNC_PREF_ALT_COLOR_BY_TRANS
GNC_PREF_USE_THEME_COLORS = _sw_core_utils.GNC_PREF_USE_THEME_COLORS
GNC_PREF_USE_GNUCASH_COLOR_THEME = _sw_core_utils.GNC_PREF_USE_GNUCASH_COLOR_THEME
GNC_PREF_TAB_TRANS_MEMORISED = _sw_core_utils.GNC_PREF_TAB_TRANS_MEMORISED
GNC_PREF_FUTURE_AFTER_BLANK = _sw_core_utils.GNC_PREF_FUTURE_AFTER_BLANK
GNC_PREF_START_CHOICE_ABS = _sw_core_utils.GNC_PREF_START_CHOICE_ABS
GNC_PREF_START_CHOICE_REL = _sw_core_utils.GNC_PREF_START_CHOICE_REL
GNC_PREF_START_DATE = _sw_core_utils.GNC_PREF_START_DATE
GNC_PREF_START_PERIOD = _sw_core_utils.GNC_PREF_START_PERIOD
GNC_PREF_END_CHOICE_ABS = _sw_core_utils.GNC_PREF_END_CHOICE_ABS
GNC_PREF_END_CHOICE_REL = _sw_core_utils.GNC_PREF_END_CHOICE_REL
GNC_PREF_END_DATE = _sw_core_utils.GNC_PREF_END_DATE
GNC_PREF_END_PERIOD = _sw_core_utils.GNC_PREF_END_PERIOD
GNC_PREF_CURRENCY_OTHER = _sw_core_utils.GNC_PREF_CURRENCY_OTHER
GNC_PREF_CURRENCY_CHOICE_LOCALE = _sw_core_utils.GNC_PREF_CURRENCY_CHOICE_LOCALE
GNC_PREF_CURRENCY_CHOICE_OTHER = _sw_core_utils.GNC_PREF_CURRENCY_CHOICE_OTHER

def gnc_prefs_get_namespace_regexp() -> "gchar const *":
    return _sw_core_utils.gnc_prefs_get_namespace_regexp()

def gnc_prefs_set_namespace_regexp(str: "gchar const *") -> "void":
    return _sw_core_utils.gnc_prefs_set_namespace_regexp(str)

def gnc_prefs_is_debugging_enabled() -> "gboolean":
    return _sw_core_utils.gnc_prefs_is_debugging_enabled()

def gnc_prefs_set_debugging(d: "gboolean") -> "void":
    return _sw_core_utils.gnc_prefs_set_debugging(d)

def gnc_prefs_is_extra_enabled() -> "gboolean":
    return _sw_core_utils.gnc_prefs_is_extra_enabled()

def gnc_prefs_set_extra(enabled: "gboolean") -> "void":
    return _sw_core_utils.gnc_prefs_set_extra(enabled)

def gnc_prefs_get_file_save_compressed() -> "gboolean":
    return _sw_core_utils.gnc_prefs_get_file_save_compressed()

def gnc_prefs_set_file_save_compressed(compressed: "gboolean") -> "void":
    return _sw_core_utils.gnc_prefs_set_file_save_compressed(compressed)

def gnc_prefs_get_file_retention_policy() -> "gint":
    return _sw_core_utils.gnc_prefs_get_file_retention_policy()

def gnc_prefs_set_file_retention_policy(policy: "gint") -> "void":
    return _sw_core_utils.gnc_prefs_set_file_retention_policy(policy)

def gnc_prefs_get_file_retention_days() -> "gint":
    return _sw_core_utils.gnc_prefs_get_file_retention_days()

def gnc_prefs_set_file_retention_days(days: "gint") -> "void":
    return _sw_core_utils.gnc_prefs_set_file_retention_days(days)

def gnc_prefs_get_long_version() -> "guint":
    return _sw_core_utils.gnc_prefs_get_long_version()

def gnc_prefs_is_set_up() -> "gboolean":
    return _sw_core_utils.gnc_prefs_is_set_up()

def gnc_prefs_block_all() -> "void":
    return _sw_core_utils.gnc_prefs_block_all()

def gnc_prefs_unblock_all() -> "void":
    return _sw_core_utils.gnc_prefs_unblock_all()

def gnc_prefs_register_cb(group: "char const *", pref_name: "gchar const *", func: "gpointer", user_data: "gpointer") -> "gulong":
    return _sw_core_utils.gnc_prefs_register_cb(group, pref_name, func, user_data)

def gnc_prefs_remove_cb_by_func(group: "gchar const *", pref_name: "gchar const *", func: "gpointer", user_data: "gpointer") -> "void":
    return _sw_core_utils.gnc_prefs_remove_cb_by_func(group, pref_name, func, user_data)

def gnc_prefs_remove_cb_by_id(group: "gchar const *", id: "guint") -> "void":
    return _sw_core_utils.gnc_prefs_remove_cb_by_id(group, id)

def gnc_prefs_register_group_cb(group: "gchar const *", func: "gpointer", user_data: "gpointer") -> "guint":
    return _sw_core_utils.gnc_prefs_register_group_cb(group, func, user_data)

def gnc_prefs_remove_group_cb_by_func(group: "gchar const *", func: "gpointer", user_data: "gpointer") -> "void":
    return _sw_core_utils.gnc_prefs_remove_group_cb_by_func(group, func, user_data)

def gnc_prefs_bind(group: "gchar const *", pref_name: "gchar const *", object: "gpointer", property: "gchar const *") -> "void":
    return _sw_core_utils.gnc_prefs_bind(group, pref_name, object, property)

def gnc_prefs_get_bool(group: "gchar const *", pref_name: "gchar const *") -> "gboolean":
    return _sw_core_utils.gnc_prefs_get_bool(group, pref_name)

def gnc_prefs_get_int(group: "gchar const *", pref_name: "gchar const *") -> "gint":
    return _sw_core_utils.gnc_prefs_get_int(group, pref_name)

def gnc_prefs_get_int64(group: "gchar const *", pref_name: "gchar const *") -> "gint64":
    return _sw_core_utils.gnc_prefs_get_int64(group, pref_name)

def gnc_prefs_get_float(group: "gchar const *", pref_name: "gchar const *") -> "gdouble":
    return _sw_core_utils.gnc_prefs_get_float(group, pref_name)

def gnc_prefs_get_string(group: "gchar const *", pref_name: "gchar const *") -> "gchar *":
    return _sw_core_utils.gnc_prefs_get_string(group, pref_name)

def gnc_prefs_get_enum(group: "gchar const *", pref_name: "gchar const *") -> "gint":
    return _sw_core_utils.gnc_prefs_get_enum(group, pref_name)

def gnc_prefs_get_coords(group: "gchar const *", pref_name: "gchar const *", x: "gdouble *", y: "gdouble *") -> "void":
    return _sw_core_utils.gnc_prefs_get_coords(group, pref_name, x, y)

def gnc_prefs_get_value(group: "gchar const *", pref_name: "gchar const *") -> "GVariant *":
    return _sw_core_utils.gnc_prefs_get_value(group, pref_name)

def gnc_prefs_set_bool(group: "gchar const *", pref_name: "gchar const *", value: "gboolean") -> "gboolean":
    return _sw_core_utils.gnc_prefs_set_bool(group, pref_name, value)

def gnc_prefs_set_int(group: "gchar const *", pref_name: "gchar const *", value: "gint") -> "gboolean":
    return _sw_core_utils.gnc_prefs_set_int(group, pref_name, value)

def gnc_prefs_set_int64(group: "gchar const *", pref_name: "gchar const *", value: "gint64") -> "gboolean":
    return _sw_core_utils.gnc_prefs_set_int64(group, pref_name, value)

def gnc_prefs_set_float(group: "gchar const *", pref_name: "gchar const *", value: "gdouble") -> "gboolean":
    return _sw_core_utils.gnc_prefs_set_float(group, pref_name, value)

def gnc_prefs_set_string(group: "gchar const *", pref_name: "gchar const *", value: "gchar const *") -> "gboolean":
    return _sw_core_utils.gnc_prefs_set_string(group, pref_name, value)

def gnc_prefs_set_enum(group: "gchar const *", pref_name: "gchar const *", value: "gint") -> "gboolean":
    return _sw_core_utils.gnc_prefs_set_enum(group, pref_name, value)

def gnc_prefs_set_coords(group: "gchar const *", pref_name: "gchar const *", x: "gdouble", y: "gdouble") -> "gboolean":
    return _sw_core_utils.gnc_prefs_set_coords(group, pref_name, x, y)

def gnc_prefs_set_value(group: "gchar const *", pref_name: "gchar const *", value: "GVariant *") -> "gboolean":
    return _sw_core_utils.gnc_prefs_set_value(group, pref_name, value)

def gnc_prefs_reset(group: "gchar const *", pref_name: "gchar const *") -> "void":
    return _sw_core_utils.gnc_prefs_reset(group, pref_name)

def gnc_prefs_reset_group(group: "gchar const *") -> "void":
    return _sw_core_utils.gnc_prefs_reset_group(group)

def gnc_version() -> "char const *":
    return _sw_core_utils.gnc_version()

def gnc_build_id() -> "char const *":
    return _sw_core_utils.gnc_build_id()

def gnc_vcs_rev() -> "char const *":
    return _sw_core_utils.gnc_vcs_rev()

def gnc_vcs_rev_date() -> "char const *":
    return _sw_core_utils.gnc_vcs_rev_date()

def gnc_gnucash_major_version() -> "int const":
    return _sw_core_utils.gnc_gnucash_major_version()

def gnc_path_get_bindir() -> "gchar *":
    return _sw_core_utils.gnc_path_get_bindir()

def gnc_path_get_stdreportsdir() -> "gchar *":
    return _sw_core_utils.gnc_path_get_stdreportsdir()

def gnc_path_find_localized_html_file(arg1: "gchar const *") -> "gchar *":
    return _sw_core_utils.gnc_path_find_localized_html_file(arg1)

def gnc_build_userdata_path(arg1: "gchar const *") -> "gchar *":
    return _sw_core_utils.gnc_build_userdata_path(arg1)

def gnc_build_report_path(arg1: "gchar const *") -> "gchar *":
    return _sw_core_utils.gnc_build_report_path(arg1)

def gnc_build_stdreports_path(arg1: "gchar const *") -> "gchar *":
    return _sw_core_utils.gnc_build_stdreports_path(arg1)

def gnc_scm_log_warn(arg1: "gchar const *") -> "void":
    return _sw_core_utils.gnc_scm_log_warn(arg1)

def gnc_scm_log_error(arg1: "gchar const *") -> "void":
    return _sw_core_utils.gnc_scm_log_error(arg1)

def gnc_scm_log_msg(arg1: "gchar const *") -> "void":
    return _sw_core_utils.gnc_scm_log_msg(arg1)

def gnc_scm_log_debug(arg1: "gchar const *") -> "void":
    return _sw_core_utils.gnc_scm_log_debug(arg1)

def gnc_utf8_strip_invalid_strdup(arg1: "gchar const *") -> "gchar *":
    return _sw_core_utils.gnc_utf8_strip_invalid_strdup(arg1)

def gnc_locale_from_utf8(arg1: "gchar const *") -> "gchar *":
    return _sw_core_utils.gnc_locale_from_utf8(arg1)

def gnc_locale_to_utf8(arg1: "gchar const *") -> "gchar *":
    return _sw_core_utils.gnc_locale_to_utf8(arg1)

def gnc_locale_default_iso_currency_code() -> "char const *":
    return _sw_core_utils.gnc_locale_default_iso_currency_code()

def gnc_utf8_validate(arg1: "gchar const *", arg2: "gssize", arg3: "gchar const **") -> "gboolean":
    return _sw_core_utils.gnc_utf8_validate(arg1, arg2, arg3)


