# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sw_app_utils
else:
    import _sw_app_utils

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import gnucash.gnucash_core_c

def gnc_prefs_init() -> "void":
    r"""gnc_prefs_init()"""
    return _sw_app_utils.gnc_prefs_init()

def gnc_get_current_book() -> "QofBook *":
    r"""gnc_get_current_book() -> QofBook *"""
    return _sw_app_utils.gnc_get_current_book()

def gnc_get_current_session() -> "QofSession *":
    r"""gnc_get_current_session() -> QofSession *"""
    return _sw_app_utils.gnc_get_current_session()

def gnc_get_current_book_tax_name() -> "gchar const *":
    r"""gnc_get_current_book_tax_name() -> gchar const *"""
    return _sw_app_utils.gnc_get_current_book_tax_name()

def gnc_get_current_book_tax_type() -> "gchar const *":
    r"""gnc_get_current_book_tax_type() -> gchar const *"""
    return _sw_app_utils.gnc_get_current_book_tax_type()

def gnc_get_current_root_account() -> "Account *":
    r"""gnc_get_current_root_account() -> Account *"""
    return _sw_app_utils.gnc_get_current_root_account()

def gnc_gettext_helper(string: "char const *") -> "char *":
    r"""gnc_gettext_helper(char const * string) -> char *"""
    return _sw_app_utils.gnc_gettext_helper(string)

def gnc_option_db_new(guile_options: "SCM") -> "GNCOptionDB *":
    r"""gnc_option_db_new(SCM guile_options) -> GNCOptionDB *"""
    return _sw_app_utils.gnc_option_db_new(guile_options)

def gnc_option_db_destroy(odb: "GNCOptionDB *") -> "void":
    r"""gnc_option_db_destroy(GNCOptionDB * odb)"""
    return _sw_app_utils.gnc_option_db_destroy(odb)

def gnc_option_db_set_option_selectable_by_name(guile_option: "SCM", section: "char const *", name: "char const *", selectable: "gboolean") -> "void":
    r"""gnc_option_db_set_option_selectable_by_name(SCM guile_option, char const * section, char const * name, gboolean selectable)"""
    return _sw_app_utils.gnc_option_db_set_option_selectable_by_name(guile_option, section, name, selectable)


